// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TravelApp.Data;

#nullable disable

namespace TravelApp.Data.Migrations
{
    [DbContext(typeof(TravelAppDbContext))]
    [Migration("20221204110613_CreateSeedDatabase")]
    partial class CreateSeedDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TravelApp.Data.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<bool>("IsVIP")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dea12856-c198-4129-b3f3-b893d8395082",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ee4e17b8-fb58-4dbf-9c66-cbdc01f659bf",
                            Email = "admin@admin.com",
                            EmailConfirmed = false,
                            FirstName = "Ivan",
                            IsVIP = false,
                            LastName = "Ivanov",
                            LockoutEnabled = false,
                            NormalizedEmail = "admin@admin.com",
                            NormalizedUserName = "admin@admin.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEM6VEMAEhlyRfUtRq/GPNKqiGRzwQ78y9XQBCI95oJ1P5sRwQUql/EWk+Gfg2VXHbQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b63ca20e-b56c-4998-9d8b-e5da91e19551",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        },
                        new
                        {
                            Id = "fire8756-c198-4129-b3f3-b893d8395082",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "62a14236-1478-444d-990c-a97432c92e10",
                            Email = "guest1@guest.com",
                            EmailConfirmed = false,
                            FirstName = "Petar",
                            IsVIP = false,
                            LastName = "Petrov",
                            LockoutEnabled = false,
                            NormalizedEmail = "guest1@guest.com",
                            NormalizedUserName = "guest1@guest.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEMubs69yHh8Z9Ptdd1gnn0VavDZnkQd8kmH5HEkwtysjX4mrs85EmuQ06iZdMIp4hg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a761593b-8a26-4824-a979-ee9681d625ac",
                            TwoFactorEnabled = false,
                            UserName = "guest1@guest.com"
                        },
                        new
                        {
                            Id = "roof9675-c198-4129-b3f3-b893d8395082",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "64749097-ed2d-49f5-a106-9ab12ae0c9b4",
                            Email = "guest2@guest.com",
                            EmailConfirmed = false,
                            FirstName = "Dimitar",
                            IsVIP = false,
                            LastName = "Dimitrov",
                            LockoutEnabled = false,
                            NormalizedEmail = "guest2@guest.com",
                            NormalizedUserName = "guest2@guest.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEMupYjp+l/tVvdTpg6wTGHUNJAKQoWojAYvKK3kKylgsUwNu88cypyTiWArY149Eaw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d182553b-d4ec-4113-94d7-05e767373db1",
                            TwoFactorEnabled = false,
                            UserName = "guest2@guest.com"
                        });
                });

            modelBuilder.Entity("TravelApp.Data.Entities.ApplicationUserJourney", b =>
                {
                    b.Property<int>("JourneyId")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("JourneyId", "ApplicationUserId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("ApplicationUsersJourneys");

                    b.HasData(
                        new
                        {
                            JourneyId = 1,
                            ApplicationUserId = "dea12856-c198-4129-b3f3-b893d8395082"
                        },
                        new
                        {
                            JourneyId = 2,
                            ApplicationUserId = "dea12856-c198-4129-b3f3-b893d8395082"
                        },
                        new
                        {
                            JourneyId = 3,
                            ApplicationUserId = "dea12856-c198-4129-b3f3-b893d8395082"
                        });
                });

            modelBuilder.Entity("TravelApp.Data.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "guest1@guest.com",
                            Description = "My trip to NY was cool. I had amazing experience. I am coming back very soon.",
                            PostId = 1,
                            Title = "New York is the best!"
                        },
                        new
                        {
                            Id = 2,
                            Author = "guest2@guest.com",
                            Description = "Your trip looks fun. I will visit New York in two months. You have some tips.",
                            PostId = 1,
                            Title = "Amazing New York"
                        },
                        new
                        {
                            Id = 3,
                            Author = "guest2@guest.com",
                            Description = "Los Angeles looks great. I have great time there. Hope to be back soon.",
                            PostId = 2,
                            Title = "My journey in Los Angeles!"
                        });
                });

            modelBuilder.Entity("TravelApp.Data.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<long>("Area")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("Population")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Area = 110994L,
                            Description = "Country in Europe",
                            Image = "/Photos/Bulgaria.jpg?a=123456",
                            Name = "Bulgaria",
                            Population = 6823493L
                        },
                        new
                        {
                            Id = 2,
                            Area = 56594L,
                            Description = "Country in Europe",
                            Image = "/Photos/Croatia.jpg?a=123456",
                            Name = "Croatia",
                            Population = 4044782L
                        },
                        new
                        {
                            Id = 3,
                            Area = 9833520L,
                            Description = "Country in NorthAmerica",
                            Image = "/Photos/USA.jpg?a=123456",
                            Name = "USA",
                            Population = 335649823L
                        });
                });

            modelBuilder.Entity("TravelApp.Data.Entities.CountryJourney", b =>
                {
                    b.Property<int>("JourneyId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.HasKey("JourneyId", "CountryId");

                    b.HasIndex("CountryId");

                    b.ToTable("CountriesJourneys");

                    b.HasData(
                        new
                        {
                            JourneyId = 1,
                            CountryId = 3
                        },
                        new
                        {
                            JourneyId = 2,
                            CountryId = 3
                        },
                        new
                        {
                            JourneyId = 3,
                            CountryId = 2
                        },
                        new
                        {
                            JourneyId = 3,
                            CountryId = 1
                        });
                });

            modelBuilder.Entity("TravelApp.Data.Entities.Journey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Days")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfPeople")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("Journeys");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Days = 11,
                            Description = "Travel New York. Experience the city with our great proposal. Dont miss it.",
                            EndDate = new DateTime(2023, 1, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/Photos/NewYork.jpg?a=123456",
                            NumberOfPeople = 20,
                            Price = 10000m,
                            StartDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Journey through New York"
                        },
                        new
                        {
                            Id = 2,
                            Days = 11,
                            Description = "Our new offer. Visit this amazing city. Experience this adventure.",
                            EndDate = new DateTime(2023, 2, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/Photos/LosAngeles.jpg?a=123456",
                            NumberOfPeople = 30,
                            Price = 10000m,
                            StartDate = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Journey through Los Angeles"
                        },
                        new
                        {
                            Id = 3,
                            Days = 8,
                            Description = "Visit two beautiful countries. Experience this adventure.",
                            EndDate = new DateTime(2023, 3, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/Photos/Zagreb.jpg?a=123456",
                            NumberOfPeople = 20,
                            Price = 500m,
                            StartDate = new DateTime(2023, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Journey through Europe"
                        });
                });

            modelBuilder.Entity("TravelApp.Data.Entities.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TripId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "My trip to New York was fun. The city is amazing. I love it.",
                            Image = "/Photos/NewYork.jpg?a=123456",
                            Title = "Post about my trip to New York.",
                            TripId = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "My trip to Los Angeles is unforgettable. I miss the city",
                            Image = "/Photos/LosAngeles.jpg?a=123456",
                            Title = "My trip to Los Angeles.",
                            TripId = 2
                        });
                });

            modelBuilder.Entity("TravelApp.Data.Entities.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsManaged")
                        .HasColumnType("bit");

                    b.Property<int>("JourneyId")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfPeople")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("JourneyId");

                    b.ToTable("Requests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = "dea12856-c198-4129-b3f3-b893d8395082",
                            IsApproved = false,
                            IsManaged = false,
                            JourneyId = 1,
                            NumberOfPeople = 2
                        },
                        new
                        {
                            Id = 2,
                            ApplicationUserId = "fire8756-c198-4129-b3f3-b893d8395082",
                            IsApproved = false,
                            IsManaged = false,
                            JourneyId = 2,
                            NumberOfPeople = 3
                        });
                });

            modelBuilder.Entity("TravelApp.Data.Entities.Town", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<long>("Area")
                        .HasColumnType("bigint");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("Population")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Towns");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Area = 77818L,
                            CountryId = 3,
                            Description = "City in USA",
                            Image = "/Photos/NewYork.jpg?a=123456",
                            Name = "New York",
                            Population = 8930002L
                        },
                        new
                        {
                            Id = 2,
                            Area = 121000L,
                            CountryId = 3,
                            Description = "City in USA",
                            Image = "/Photos/LosAngeles.jpg?a=123456",
                            Name = "Los Angeles",
                            Population = 3919973L
                        },
                        new
                        {
                            Id = 3,
                            Area = 10200L,
                            CountryId = 1,
                            Description = "City in Bulgaria",
                            Image = "/Photos/Plovdiv.jpg?a=123456",
                            Name = "Plovdiv",
                            Population = 343424L
                        },
                        new
                        {
                            Id = 4,
                            Area = 64100L,
                            CountryId = 2,
                            Description = "City in Croatia",
                            Image = "/Photos/Zagreb.jpg?a=123456",
                            Name = "Zagreb",
                            Population = 806341L
                        });
                });

            modelBuilder.Entity("TravelApp.Data.Entities.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("JourneyId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("JourneyId");

                    b.ToTable("Trips");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = "fire8756-c198-4129-b3f3-b893d8395082",
                            JourneyId = 1,
                            Rating = 10,
                            Title = "New York Trip"
                        },
                        new
                        {
                            Id = 2,
                            ApplicationUserId = "roof9675-c198-4129-b3f3-b893d8395082",
                            JourneyId = 2,
                            Rating = 10,
                            Title = "Trip to Los Angeles"
                        });
                });

            modelBuilder.Entity("TravelApp.Data.Entities.ApplicationRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.HasDiscriminator().HasValue("ApplicationRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TravelApp.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TravelApp.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelApp.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TravelApp.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TravelApp.Data.Entities.ApplicationUserJourney", b =>
                {
                    b.HasOne("TravelApp.Data.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("ApplicationUsersJourneys")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelApp.Data.Entities.Journey", "Journey")
                        .WithMany("ApplicationUsersJourneys")
                        .HasForeignKey("JourneyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Journey");
                });

            modelBuilder.Entity("TravelApp.Data.Entities.Comment", b =>
                {
                    b.HasOne("TravelApp.Data.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("TravelApp.Data.Entities.CountryJourney", b =>
                {
                    b.HasOne("TravelApp.Data.Entities.Country", "Country")
                        .WithMany("CountriesJourneys")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelApp.Data.Entities.Journey", "Journey")
                        .WithMany("CountriesJourneys")
                        .HasForeignKey("JourneyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Journey");
                });

            modelBuilder.Entity("TravelApp.Data.Entities.Post", b =>
                {
                    b.HasOne("TravelApp.Data.Entities.Trip", "Trip")
                        .WithMany()
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("TravelApp.Data.Entities.Request", b =>
                {
                    b.HasOne("TravelApp.Data.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("Requests")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelApp.Data.Entities.Journey", "Journey")
                        .WithMany("Requests")
                        .HasForeignKey("JourneyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Journey");
                });

            modelBuilder.Entity("TravelApp.Data.Entities.Town", b =>
                {
                    b.HasOne("TravelApp.Data.Entities.Country", "Country")
                        .WithMany("Towns")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("TravelApp.Data.Entities.Trip", b =>
                {
                    b.HasOne("TravelApp.Data.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("Trips")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelApp.Data.Entities.Journey", "Journey")
                        .WithMany("Trips")
                        .HasForeignKey("JourneyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Journey");
                });

            modelBuilder.Entity("TravelApp.Data.Entities.ApplicationUser", b =>
                {
                    b.Navigation("ApplicationUsersJourneys");

                    b.Navigation("Requests");

                    b.Navigation("Trips");
                });

            modelBuilder.Entity("TravelApp.Data.Entities.Country", b =>
                {
                    b.Navigation("CountriesJourneys");

                    b.Navigation("Towns");
                });

            modelBuilder.Entity("TravelApp.Data.Entities.Journey", b =>
                {
                    b.Navigation("ApplicationUsersJourneys");

                    b.Navigation("CountriesJourneys");

                    b.Navigation("Requests");

                    b.Navigation("Trips");
                });

            modelBuilder.Entity("TravelApp.Data.Entities.Post", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
